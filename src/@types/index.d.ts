// Type definitions for @via-profit-services/core
// Project: git@github.com:via-profit-services/core
// Definitions by: Via Profit <https://github.com/via-profit-services>
// Warning: This is not autogenerated definitions!

/// <reference types="node" />
declare module '@via-profit-services/core' {
  import { GraphQLSchema, ValidationRule } from 'graphql';
  import DataLoader from 'dataloader';
  import { Router, Request } from 'express';
  import http from 'http';
  import Winston from 'winston';
  import 'winston-daily-rotate-file';
  
  export type MaybePromise<T> = Promise<T> | T;

  export interface Context {
    logger: LoggersCollection;
    timezone: string;
    dataloader: DataLoaderCollection;
    services: ServicesCollection;
  }

  export interface ServicesCollection {
    [key: string]: unknown;
  }

  export interface DataLoaderCollection {
    [key: string]: DataLoader<unknown, unknown>;
  }

  export type Logger = Winston.Logger;
  export interface LoggersCollection {
    /**
     * Server logger \
     *\
    * Transports:
    *  - `warn` - File transport
    *  - `error` - File transport
    *  - `debug` - File transport
    */
    server: Logger;
  }
  export interface LoggersConfig {
    logDir: string;
  }
  
  export type ApplicationFactory = (props: InitProps) => Promise<{
    viaProfitGraphql: Router;
  }>;

  export interface InitProps {
      server: http.Server;
      /**
       * Server timezone
       * \
       * Default: `UTC`
       */
      timezone?: string;
      /**
       * Logs directory
       * \
       * Default: `./log`
       */
      logDir?: string;
      /**
       * Allow introspection queries
       * \
       * Default: `false`
       */
      enableIntrospection?: boolean;
      /**
       * GraphQL Schema Definition
       * @see: https://graphql.org
       */
      schema: GraphQLSchema;
      /**
       * Debug mode \
       * \
       * Default: `false`
       */
      debug?: boolean;
      rootValue?: unknown;
      middleware?: Middleware | Middleware[];
  }

  export interface MiddlewareProps {
    config: Configuration;
    context: Context;
    request: Request;
    schema: GraphQLSchema;
  }

  export interface MiddlewareResponse {
    context?: Context;
    validationRule?: ValidationRule | ValidationRule[];
    schema?: GraphQLSchema;
  }

  export type Middleware = (props: MiddlewareProps) => MaybePromise<MiddlewareResponse>;


  export type Configuration = Required<InitProps>;
  
  export interface SubServerConfig {
    schema: GraphQLSchema;
    server: http.Server;
    context: Context;
  }
  
  export interface ErrorHandler extends Error {
      message: string;
      status?: number;
      stack?: string;
      metaData?: any;
  }
  /**
   * GraphQL Cursor connection
   * @see https://facebook.github.io/relay/graphql/connections.htm
   */
  export interface CursorConnection<T> {
      edges: Edge<T>[];
      pageInfo: IPageInfo;
      totalCount: number;
  }
  /**
   * GraphQL PageInfo
   * @see https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
   */
  export interface IPageInfo {
      startCursor?: string;
      endCursor?: string;
      hasPreviousPage: boolean;
      hasNextPage: boolean;
  }
  /**
   * GraphQL Node type
   * @see https://facebook.github.io/relay/graphql/connections.htm#sec-Node
   */
  export type Node<T> = T & {
      id: string;
      createdAt: Date;
      updatedAt: Date;
  };
  /**
   * GraphQL Edge type
   * @see https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
   */
  export interface Edge<T> {
      node: Node<T>;
      cursor: string;
  }
  export interface ListResponse<T> {
      totalCount: number;
      offset: number;
      limit: number;
      nodes: Node<T>[];
      orderBy: OrderBy;
      where: Where;
      revert?: boolean;
  }
  export interface CursorConnectionProps<T> {
      totalCount: number;
      limit: number;
      nodes: Node<T>[];
      offset?: number;
      orderBy?: OrderBy;
      where?: Where;
      revert?: boolean;
  }
  export interface BetweenDate {
      start: Date;
      end: Date;
  }
  export interface BetweenTime {
      start: string;
      end: string;
  }
  export interface BetweenDateTime {
      start: Date;
      end: Date;
  }
  export interface BetweenInt {
      start: number;
      end: number;
  }
  export interface BetweenMoney {
    start: number;
    end: number;
  }
  export interface Between {
    [key: string]: BetweenDate | BetweenTime | BetweenDateTime | BetweenInt | BetweenMoney;
  }
  export interface InputFilter {
    first?: number;
    offset?: number;
    last?: number;
    after?: string;
    before?: string;
    orderBy?: OrderBy;
    search?: InputSearch;
    between?: Between;
    filter?: {
        [key: string]: InputFilterValue | readonly string[] | readonly number[];
    };
  }
  export type InputFilterValue = string | number | boolean | null;
  export type InputSearch = SearchSingleField | SearchSingleField[] | SearchMultipleFields;
  interface SearchSingleField {
    field: string;
    query: string;
  }
  interface SearchMultipleFields {
    fields: string[];
    query: string;
  }
  export type OutputSearch = {
    field: string;
    query: string;
  }[];
  export interface OutputFilter {
    limit: number;
    offset: number;
    orderBy: OrderBy;
    where: Where;
    revert: boolean;
    search: OutputSearch | false;
    between: Between;
  }
  export interface CursorPayload {
    offset: number;
    limit: number;
    where: Where;
    orderBy: OrderBy;
  }
  export type OrderBy = {
    field: string;
    direction: DirectionRange;
  }[];
  export type WhereValue = string | number | boolean | null | readonly string[] | readonly number[] | undefined;
  export type WhereField = [string, WhereAction, WhereValue];
  export type Where = WhereField[];
  
  export interface Phone {
    number: string;
    country: string;
    description: string;
    metaData?: any;
  } 

  /**
   * @deprecated Use `ApplyAliases` type of `@via-profit-services/knex` instead
   * 
   * Key - is a alias name \
   * Value - is a field alias name or array of names \
   * Use asterisk (\*) for default alias name. \
   * For example: {\
   * books: ['title', 'length'],\
   * info: ['*'],\
   * }
   */
  export type TableAliases = {
    [key: string]: string | string[];
  };
  
  export type StringToCursor = (str: string) => string;
  export type CursorToString = (str: string) => string;
  export type MakeNodeCursor = (cursorName: string, cursorPayload: CursorPayload) => string;
  export type GetCursorPayload = (cursor: string) => CursorPayload;
  export type BuildCursorConnection = <T>(props: CursorConnectionProps<T>, cursorName?: string) => CursorConnection<T>;
  export type NodeToEdge = <T>(node: Node<T>, cursorName: string, cursorPayload: CursorPayload) => Edge<T>;
  export type ExtractNodeField = <T, K extends keyof Node<T>>(nodes: Node<T>[], field: K) => Node<T>[K][];
  export type ExtractNodeIds = <T>(nodes: Node<T>[]) => string[];
  export type CollateForDataloader = <T>(ids: string[], nodes: Node<T>[], returnUndefined?: boolean) => Node<T>[];
  export type ArrayOfIdsToArrayOfObjectIds = (array: string[]) => {
      id: string;
  }[];

  /**
   * @deprecated Use `ApplyAliases` type of `@via-profit-services/knex` instead
   */
  export type ApplyAliases = (whereClause: Where, aliases: TableAliases) => Where;
  export type BuildQueryFilter = <T extends InputFilter>(args: T) => OutputFilter;
  
  export class ServerError extends Error implements ErrorHandler {
    metaData: any;
    status: number;
    constructor(message: string, metaData?: any);
  }
  export class BadRequestError extends Error implements ErrorHandler {
    metaData: any;
    status: number;
    constructor(message: string, metaData?: any);
  }
  export class ForbiddenError extends Error implements ErrorHandler {
    metaData: any;
    status: number;
    constructor(message: string, metaData?: any);
  }
  export class NotFoundError extends Error implements ErrorHandler {
    metaData: any;
    status: number;
    constructor(message: string, metaData?: any);
  }

  export type DirectionRange = 'asc' | 'desc';
  export type WhereAction = '=' | '<>' | '>' | '<' | '>=' | '<=' | 'in' | 'notIn' | 'like' | 'ilike' | 'is null' | 'is not null';
  
  /**
   * Convert string to cursor base64 string
   */
  export const stringToCursor: StringToCursor;

  /**
   * Convert base64 cursor to string
   */
  export const cursorToString: CursorToString;

  /**
   * Return cursor base64 cursor string by name and cursor payload
   */
  export const makeNodeCursor: MakeNodeCursor;

  /**
   * Convert string to cursor base64 string and return payload
   */
  export const getCursorPayload: GetCursorPayload;

  /**
   * Return Relay cursor bundle
   */
  export const buildCursorConnection: BuildCursorConnection;

  /**
   * Wrap node to cursor object
   */
  export const nodeToEdge: NodeToEdge;

  /**
   * Return array of fields of node
   */
  export const extractNodeField: ExtractNodeField;
    
  /**
   * Returns node IDs array
   */
  export const extractNodeIds: ExtractNodeIds;

  /**
   * Collate rows for dataloader response
   */
  export const collateForDataloader: CollateForDataloader;

  /**
   * Format array of IDs to object with id key
   */
  export const arrayOfIdsToArrayOfObjectIds: ArrayOfIdsToArrayOfObjectIds;

  /**
   * @deprecated Use `ApplyAliases` function of `@via-profit-services/knex` instead
   */
  export const applyAliases: ApplyAliases;

  /***
   * Convert input filter (partial from GraphQL request) to persist filter
   */
  export const buildQueryFilter: BuildQueryFilter;

  /**
   * Core type definitions (GraphQL SDL string)
   */
  export const typeDefs: string;
  export const logFormatter: Winston.Logform.Format;
  export const resolvers: any;
  export const factory: ApplicationFactory;

  export const LOG_FILENAME_DEBUG: string;
  export const LOG_FILENAME_ERRORS: string;
  export const LOG_FILENAME_WARNINGS: string;
  export const LOG_DATE_PATTERNT: string;
  export const LOG_MAX_SIZE: string;
  export const LOG_MAX_FILES: string;

}
