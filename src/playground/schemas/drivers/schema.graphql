extend type Query {
  drivers: DriversQuery!
}

extend type Mutation {
  drivers: DriversMutation!
}

enum DriversOrderField {
  name
  createdAt
  updatedAt
}

enum DriverLegalStatus {
  person
  legal
  entrepreneur
}

enum DriverStatus {
  active
  inactive
  dismissed
  sick
  blocked
  holiday
}

"""
Drivers module queries
"""
type DriversQuery {

  """
  Returns Drivers list bundle
  """
  list(
    first: Int
    offset: Int
    after: String
    orderBy: [OrderBy]
    filter: DriversListFilter
  ): DriversListConnection!
}

type Error {
  name: String!
  msg: String
}

type DriversMutationPayload {
  driver: Driver
}

type DriversMutation {
  updateDriver(
    id: ID!
    data: InputDriverData!
  ): DriversMutationPayload!
}


input DriversListFilter {
  status: DriverStatus
  legalStatus: DriverLegalStatus
    
}

"""
Drivers adge bundle
"""
type DriversEdge implements Edge {
  node: Driver!
  cursor: String!
}

"""
Drivers list bundle
"""
type DriversListConnection implements Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [DriversEdge]!
}




"""
Driver data
"""
type Driver implements Node {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date!
  legalStatus: DriverLegalStatus!
  status: DriverStatus!
}

input InputDriverData {
  name: String
  legalStatus: DriverLegalStatus
  status: DriverStatus
}
